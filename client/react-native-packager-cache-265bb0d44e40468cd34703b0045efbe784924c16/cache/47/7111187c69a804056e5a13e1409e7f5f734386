Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBrightnessAsync = getBrightnessAsync;
exports.setBrightnessAsync = setBrightnessAsync;
exports.getSystemBrightnessAsync = getSystemBrightnessAsync;
exports.setSystemBrightnessAsync = setSystemBrightnessAsync;

var _reactNative = require('react-native');

var regeneratorRuntime = require('regenerator-runtime');

function getBrightnessAsync() {
  return regeneratorRuntime.async(function getBrightnessAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentBrightness.getBrightnessAsync());

        case 2:
          return _context.abrupt('return', _context.sent);

        case 3:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
}

function setBrightnessAsync(brightnessValue) {
  return regeneratorRuntime.async(function setBrightnessAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          brightnessValue = Math.max(0, Math.min(brightnessValue, 1));
          _context2.next = 3;
          return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentBrightness.setBrightnessAsync(brightnessValue));

        case 3:
          return _context2.abrupt('return', _context2.sent);

        case 4:
        case 'end':
          return _context2.stop();
      }
    }
  }, null, this);
}

function getSystemBrightnessAsync() {
  return regeneratorRuntime.async(function getSystemBrightnessAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (!(_reactNative.Platform.OS !== 'android')) {
            _context3.next = 4;
            break;
          }

          _context3.next = 3;
          return regeneratorRuntime.awrap(getBrightnessAsync());

        case 3:
          return _context3.abrupt('return', _context3.sent);

        case 4:
          _context3.next = 6;
          return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentBrightness.getSystemBrightnessAsync());

        case 6:
          return _context3.abrupt('return', _context3.sent);

        case 7:
        case 'end':
          return _context3.stop();
      }
    }
  }, null, this);
}

function setSystemBrightnessAsync(brightnessValue) {
  return regeneratorRuntime.async(function setSystemBrightnessAsync$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          brightnessValue = Math.max(0, Math.min(brightnessValue, 1));

          if (!(_reactNative.Platform.OS !== 'android')) {
            _context4.next = 7;
            break;
          }

          _context4.next = 4;
          return regeneratorRuntime.awrap(setBrightnessAsync(brightnessValue));

        case 4:
          return _context4.abrupt('return', _context4.sent);

        case 7:
          _context4.next = 9;
          return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentBrightness.setSystemBrightnessAsync(brightnessValue));

        case 9:
          return _context4.abrupt('return', _context4.sent);

        case 10:
        case 'end':
          return _context4.stop();
      }
    }
  }, null, this);
}