Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Constants = undefined;

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp2,
    _jsxFileName = '/Users/NinaPan/Desktop/water-festival/client/node_modules/expo/src/Camera.js';

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var regeneratorRuntime = require('regenerator-runtime');

var _components = {
  Camera: {
    displayName: 'Camera'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/NinaPan/Desktop/water-festival/client/node_modules/expo/src/Camera.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var CameraManager = _reactNative.NativeModules.ExponentCameraManager || _reactNative.NativeModules.ExponentCameraModule;

var Camera = _wrapComponent('Camera')((_temp2 = _class = function (_React$Component) {
  _inherits(Camera, _React$Component);

  function Camera() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Camera);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Camera.__proto__ || Object.getPrototypeOf(Camera)).call.apply(_ref, [this].concat(args))), _this), _this._nativeOnCameraReady = function () {
      if (_this.props.onCameraReady) {
        _this.props.onCameraReady();
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Camera, [{
    key: 'takePictureAsync',
    value: function takePictureAsync(options) {
      return regeneratorRuntime.async(function takePictureAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!options) {
                options = {};
              }
              if (!options.quality) {
                options.quality = 1;
              }
              _context.next = 4;
              return regeneratorRuntime.awrap(CameraManager.takePicture(options));

            case 4:
              return _context.abrupt('return', _context.sent);

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'getSupportedRatiosAsync',
    value: function getSupportedRatiosAsync() {
      return regeneratorRuntime.async(function getSupportedRatiosAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_reactNative.Platform.OS === 'android')) {
                _context2.next = 6;
                break;
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(CameraManager.getSupportedRatios());

            case 3:
              return _context2.abrupt('return', _context2.sent);

            case 6:
              throw new Error('Ratio is not supported on iOS');

            case 7:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'takePicture',
    value: function takePicture(options) {
      console.warn('Call takePictureAsync instead of takePicture. This method will be removed in SDK 22.');
      return this.takePictureAsync(options);
    }
  }, {
    key: 'recordAsync',
    value: function recordAsync(options) {
      return regeneratorRuntime.async(function recordAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!options || typeof options !== 'object') {
                options = {};
              } else if (typeof options.quality === 'string') {
                options.quality = Camera.Constants.VideoQuality[options.quality];
              }
              _context3.next = 3;
              return regeneratorRuntime.awrap(CameraManager.record(options));

            case 3:
              return _context3.abrupt('return', _context3.sent);

            case 4:
            case 'end':
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'stopRecording',
    value: function stopRecording() {
      CameraManager.stopRecording();
    }
  }, {
    key: 'getSupportedRatios',
    value: function getSupportedRatios() {
      console.warn('Call getSupportedRatiosAsync instead of getSupportedRatios. This method will be removed in SDK 22.');
      return this.getSupportedRatiosAsync();
    }
  }, {
    key: 'render',
    value: function render() {
      var nativeProps = this._convertNativeProps(this.props);

      return _react3.default.createElement(ExponentCamera, _extends({}, nativeProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 117
        }
      }));
    }
  }, {
    key: '_convertNativeProps',
    value: function _convertNativeProps(props) {
      var newProps = _extends({}, props);
      if (typeof props.flashMode === 'string') {
        newProps.flashMode = Camera.Constants.FlashMode[props.flashMode];
      }

      if (typeof props.type === 'string') {
        newProps.type = Camera.Constants.Type[props.type];
      }

      if (typeof props.autoFocus === 'string') {
        newProps.autoFocus = Camera.Constants.AutoFocus[props.autoFocus];
      }

      if (typeof props.whiteBalance === 'string') {
        newProps.whiteBalance = Camera.Constants.WhiteBalance[props.whiteBalance];
      }

      newProps.onCameraReadyNative = this._nativeOnCameraReady;

      if (_reactNative.Platform.OS === 'ios') {
        delete newProps.ratio;
      }

      return newProps;
    }
  }]);

  return Camera;
}(_react3.default.Component), _class.Constants = {
  Type: CameraManager.Type,
  FlashMode: CameraManager.FlashMode,
  AutoFocus: CameraManager.AutoFocus,
  WhiteBalance: CameraManager.WhiteBalance,
  VideoQuality: CameraManager.VideoQuality
}, _class.propTypes = _extends({}, _reactNative.ViewPropTypes, {
  onCameraReady: _propTypes2.default.func,
  flashMode: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  type: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  ratio: _propTypes2.default.string,
  autoFocus: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.number]),
  focusDepth: _propTypes2.default.number,
  zoom: _propTypes2.default.number,
  whiteBalance: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
}), _class.defaultProps = {
  type: CameraManager.Type.back,
  flashMode: CameraManager.FlashMode.off,
  autoFocus: CameraManager.AutoFocus.on,
  focusDepth: 0,
  ratio: '4:3',
  zoom: 0,
  whiteBalance: CameraManager.WhiteBalance.auto
}, _temp2));

exports.default = Camera;
var Constants = exports.Constants = Camera.Constants;

var ExponentCamera = (0, _reactNative.requireNativeComponent)('ExponentCamera', Camera, {
  nativeOnly: {
    onCameraReadyNative: true
  }
});