'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reactNative = require('react-native');

var RNAdMobRewarded = _reactNative.NativeModules.RNAdMobRewarded;

var eventHandlers = {
  rewardedVideoDidRewardUser: new Map(),
  rewardedVideoDidLoad: new Map(),
  rewardedVideoDidFailToLoad: new Map(),
  rewardedVideoDidOpen: new Map(),
  rewardedVideoDidClose: new Map(),
  rewardedVideoWillLeaveApplication: new Map()
};

var addEventListener = function addEventListener(type, handler) {
  switch (type) {
    case 'rewardedVideoDidRewardUser':
      eventHandlers[type].set(handler, _reactNative.DeviceEventEmitter.addListener(type, function (type, amount) {
        handler(type, amount);
      }));
      break;
    case 'rewardedVideoDidLoad':
      eventHandlers[type].set(handler, _reactNative.DeviceEventEmitter.addListener(type, handler));
      break;
    case 'rewardedVideoDidFailToLoad':
      eventHandlers[type].set(handler, _reactNative.DeviceEventEmitter.addListener(type, function (error) {
        handler(error);
      }));
      break;
    case 'rewardedVideoDidOpen':
      eventHandlers[type].set(handler, _reactNative.DeviceEventEmitter.addListener(type, handler));
      break;
    case 'rewardedVideoDidClose':
      eventHandlers[type].set(handler, _reactNative.DeviceEventEmitter.addListener(type, handler));
      break;
    case 'rewardedVideoWillLeaveApplication':
      eventHandlers[type].set(handler, _reactNative.DeviceEventEmitter.addListener(type, handler));
      break;
    default:
      console.log('Event with type ' + type + ' does not exist.');
  }
};

var removeEventListener = function removeEventListener(type, handler) {
  if (!eventHandlers[type].has(handler)) {
    return;
  }
  eventHandlers[type].get(handler).remove();
  eventHandlers[type].delete(handler);
};

var removeAllListeners = function removeAllListeners() {
  _reactNative.DeviceEventEmitter.removeAllListeners('rewardedVideoDidRewardUser');
  _reactNative.DeviceEventEmitter.removeAllListeners('rewardedVideoDidLoad');
  _reactNative.DeviceEventEmitter.removeAllListeners('rewardedVideoDidFailToLoad');
  _reactNative.DeviceEventEmitter.removeAllListeners('rewardedVideoDidOpen');
  _reactNative.DeviceEventEmitter.removeAllListeners('rewardedVideoDidClose');
  _reactNative.DeviceEventEmitter.removeAllListeners('rewardedVideoWillLeaveApplication');
};

module.exports = _extends({}, RNAdMobRewarded, {
  requestAd: function requestAd() {
    var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
    return RNAdMobRewarded.requestAd(cb);
  },
  showAd: function showAd() {
    var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
    return RNAdMobRewarded.showAd(cb);
  },
  addEventListener: addEventListener,
  removeEventListener: removeEventListener,
  removeAllListeners: removeAllListeners
});