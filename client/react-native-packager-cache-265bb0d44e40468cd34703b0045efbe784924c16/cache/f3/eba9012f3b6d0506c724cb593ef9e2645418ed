
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

if (global.GLOBAL === undefined) {
  global.GLOBAL = global;
}

if (global.window === undefined) {
  global.window = global;
}

var defineLazyObjectProperty = require('defineLazyObjectProperty');

function defineLazyProperty(object, name, getValue) {
  var descriptor = Object.getOwnPropertyDescriptor(object, name);
  if (__DEV__ && descriptor) {
    var backupName = 'original' + name[0].toUpperCase() + name.substr(1);
    Object.defineProperty(object, backupName, _extends({}, descriptor, {
      value: object[name]
    }));
  }

  var _ref = descriptor || {},
      enumerable = _ref.enumerable,
      writable = _ref.writable,
      configurable = _ref.configurable;

  if (descriptor && !configurable) {
    console.error('Failed to set polyfill. ' + name + ' is not configurable.');
    return;
  }

  defineLazyObjectProperty(object, name, {
    get: getValue,
    enumerable: enumerable !== false,
    writable: writable !== false
  });
}

function polyfillGlobal(name, getValue) {
  defineLazyProperty(global, name, getValue);
}

global.process = global.process || {};
global.process.env = global.process.env || {};
if (!global.process.env.NODE_ENV) {
  global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
}

if (global.__RCTProfileIsProfiling) {
  var Systrace = require('Systrace');
  Systrace.setEnabled(true);
}

var ExceptionsManager = require('ExceptionsManager');
ExceptionsManager.installConsoleErrorReporter();

if (!global.__fbDisableExceptionsManager) {
  var handleError = function handleError(e, isFatal) {
    try {
      ExceptionsManager.handleException(e, isFatal);
    } catch (ee) {
      console.log('Failed to print error: ', ee.message);

      throw e;
    }
  };

  var ErrorUtils = require('ErrorUtils');
  ErrorUtils.setGlobalHandler(handleError);
}

var _require = require('NativeModules'),
    PlatformConstants = _require.PlatformConstants;

if (PlatformConstants) {
  var formatVersion = function formatVersion(version) {
    return version.major + '.' + version.minor + '.' + version.patch + (version.prerelease !== null ? '-' + version.prerelease : '');
  };

  var ReactNativeVersion = require('ReactNativeVersion');
  var nativeVersion = PlatformConstants.reactNativeVersion;
  if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {
    throw new Error('React Native version mismatch.\n\nJavaScript version: ' + formatVersion(ReactNativeVersion.version) + '\n' + ('Native version: ' + formatVersion(nativeVersion) + '\n\n') + 'Make sure that you have rebuilt the native code. If the problem persists ' + 'try clearing the watchman and packager caches with `watchman watch-del-all ' + '&& react-native start --reset-cache`.');
  }
}

var _shouldPolyfillCollection = require('_shouldPolyfillES6Collection');
if (_shouldPolyfillCollection('Map')) {
  polyfillGlobal('Map', function () {
    return require('Map');
  });
}
if (_shouldPolyfillCollection('Set')) {
  polyfillGlobal('Set', function () {
    return require('Set');
  });
}

polyfillGlobal('Promise', function () {
  return require('Promise');
});

polyfillGlobal('regeneratorRuntime', function () {
  delete global.regeneratorRuntime;
  require('regenerator-runtime/runtime');
  return global.regeneratorRuntime;
});

var defineLazyTimer = function defineLazyTimer(name) {
  polyfillGlobal(name, function () {
    return require('JSTimers')[name];
  });
};
defineLazyTimer('setTimeout');
defineLazyTimer('setInterval');
defineLazyTimer('setImmediate');
defineLazyTimer('clearTimeout');
defineLazyTimer('clearInterval');
defineLazyTimer('clearImmediate');
defineLazyTimer('requestAnimationFrame');
defineLazyTimer('cancelAnimationFrame');
defineLazyTimer('requestIdleCallback');
defineLazyTimer('cancelIdleCallback');

polyfillGlobal('XMLHttpRequest', function () {
  return require('XMLHttpRequest');
});
polyfillGlobal('FormData', function () {
  return require('FormData');
});

polyfillGlobal('fetch', function () {
  return require('fetch').fetch;
});
polyfillGlobal('Headers', function () {
  return require('fetch').Headers;
});
polyfillGlobal('Request', function () {
  return require('fetch').Request;
});
polyfillGlobal('Response', function () {
  return require('fetch').Response;
});
polyfillGlobal('WebSocket', function () {
  return require('WebSocket');
});
polyfillGlobal('Blob', function () {
  return require('Blob');
});
polyfillGlobal('URL', function () {
  return require('URL');
});

if (!global.alert) {
  global.alert = function (text) {
    require('Alert').alert('Alert', '' + text);
  };
}

var navigator = global.navigator;
if (navigator === undefined) {
  global.navigator = navigator = {};
}

defineLazyProperty(navigator, 'product', function () {
  return 'ReactNative';
});
defineLazyProperty(navigator, 'geolocation', function () {
  return require('Geolocation');
});

var BatchedBridge = require('BatchedBridge');
BatchedBridge.registerLazyCallableModule('Systrace', function () {
  return require('Systrace');
});
BatchedBridge.registerLazyCallableModule('JSTimers', function () {
  return require('JSTimers');
});
BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
  return require('HeapCapture');
});
BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
  return require('SamplingProfiler');
});
BatchedBridge.registerLazyCallableModule('RCTLog', function () {
  return require('RCTLog');
});
BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
  return require('RCTDeviceEventEmitter');
});
BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
  return require('RCTNativeAppEventEmitter');
});
BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
  return require('PerformanceLogger');
});

if (__DEV__) {
  if (!global.__RCTProfileIsProfiling) {
    BatchedBridge.registerCallableModule('HMRClient', require('HMRClient'));

    if (!window.document) {
      require('setupDevtools');
    }

    var JSInspector = require('JSInspector');
    JSInspector.registerAgent(require('NetworkAgent'));
  }
}